---
const baseUrl = import.meta.env.BASE_URL;
---

<div id="quiz-container" class="max-w-4xl mx-auto">
  <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
    <div class="flex justify-between items-center mb-4">
      <div>
        <h2 id="question-counter" class="text-lg font-semibold text-gray-800">
          Question 1 of 10
        </h2>
        <p id="category-display" class="text-sm text-gray-600">
          General Knowledge
        </p>
      </div>
      <div class="text-right">
        <p class="text-sm text-gray-600">Score</p>
        <p id="score-display" class="text-2xl font-bold text-indigo-600">0/0</p>
      </div>
    </div>

    <div class="w-full bg-gray-200 rounded-full h-2">
      <div
        id="progress-bar"
        class="bg-indigo-600 h-2 rounded-full transition-all duration-300"
        style="width: 10%"
      >
      </div>
    </div>
  </div>

  <div class="bg-white rounded-lg shadow-lg p-8 mb-6">
    <div
      id="difficulty-badge"
      class="inline-block px-3 py-1 rounded-full text-sm font-medium mb-4 bg-green-100 text-green-800"
    >
      Easy
    </div>

    <h3
      id="question-text"
      class="text-xl font-semibold text-gray-800 mb-6 leading-relaxed"
    >
      Loading question...
    </h3>
    <div id="answer-options" class="space-y-3"></div>

    <div id="feedback-section" class="hidden mt-6 p-4 rounded-lg">
      <div class="flex items-start">
        <div id="feedback-icon" class="flex-shrink-0 mr-3 mt-1"></div>
        <div>
          <p id="feedback-title" class="font-semibold"></p>
          <p id="feedback-message" class="text-sm mt-1"></p>
        </div>
      </div>
    </div>
  </div>

  <div class="flex justify-between items-center">
    <button
      id="prev-button"
      class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      Previous
    </button>

    <button
      id="next-button"
      class="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      Next Question
    </button>
  </div>

  <div
    id="results-modal"
    class="hidden fixed inset-0 bg-black bg-opacity-50 p-4 z-50"
    style="display: none; align-items: center; justify-content: center;"
  >
    <div class="bg-white rounded-lg max-w-md w-full p-6">
      <div class="text-center">
        <div id="results-icon" class="mx-auto mb-4">üéâ</div>
        <h3 class="text-2xl font-bold text-gray-800 mb-2">Quiz Complete!</h3>
        <p id="final-score" class="text-lg text-gray-600 mb-6">
          You scored 0 out of 0
        </p>
        <p
          id="percentage-score"
          class="text-3xl font-bold text-indigo-600 mb-6"
        >
          0%
        </p>

        <div class="flex space-x-3">
          <button
            id="review-button"
            class="flex-1 px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Review Answers
          </button>
          <button
            id="new-quiz-button"
            class="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
          >
            New Quiz
          </button>
        </div>
      </div>
    </div>
  </div>

  <div id="review-section" class="hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 mb-6 mt-2">
      <div class="flex justify-between items-center mb-6">
        <div>
          <h2 class="text-2xl font-bold text-gray-800">Quiz Review</h2>
          <p class="text-gray-600">Review all questions and answers</p>
        </div>
        <div class="text-right">
          <p class="text-sm text-gray-600">Final Score</p>
          <p id="review-final-score" class="text-2xl font-bold text-indigo-600">
            0/0
          </p>
        </div>
      </div>

      <button
        id="back-to-quiz-button"
        class="mb-8 px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500"
      >
        ‚Üê Back to Quiz
      </button>
    </div>

    <div id="review-questions" class="space-y-6"></div>

    <div class="bg-white rounded-lg shadow-lg p-6 mt-6 text-center">
      <button
        id="new-quiz-from-review-button"
        class="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
      >
        Start New Quiz
      </button>
    </div>
  </div>

  <div id="quiz-loading" class="text-center py-16">
    <div
      class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"
    >
    </div>
    <p class="mt-4 text-gray-600">Loading quiz...</p>
  </div>

  <div id="quiz-error" class="hidden text-center py-16">
    <div class="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
    <h3 class="text-xl font-semibold text-gray-800 mb-2">Quiz Not Found</h3>
    <p class="text-gray-600 mb-6">
      No quiz data was found. Please start a new quiz.
    </p>
    <a
      href={baseUrl}
      class="inline-block px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
    >
      Start New Quiz
    </a>
  </div>
</div>

<script>
  import {
    shuffleArray,
    formatQuestionNumber,
    calculatePercentage,
  } from "../utils/api";
  import type { TriviaQuestion, QuizState } from "../types";
  import { STORAGE_KEYS, SCORE_THRESHOLDS } from "../types";

  const BUTTON_STYLES = {
    DEFAULT:
      "w-full text-left p-4 border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors",
    CORRECT:
      "w-full text-left p-4 border-2 border-green-500 bg-green-50 rounded-lg cursor-not-allowed",
    INCORRECT:
      "w-full text-left p-4 border-2 border-red-500 bg-red-50 rounded-lg cursor-not-allowed",
    DISABLED:
      "w-full text-left p-4 border border-gray-300 rounded-lg bg-gray-100 text-gray-500 cursor-not-allowed",
  } as const;

  const RESULT_ICONS = {
    EXCELLENT: "üèÜ",
    GOOD: "üéâ",
    NEEDS_IMPROVEMENT: "üìö",
  } as const;

  let quizState: QuizState;
  let questions: TriviaQuestion[] = [];
  let shuffledOptions: string[][] = [];

  function getDOMElements() {
    return {
      quizContainer: document.querySelector(
        "#quiz-container > div:nth-child(1)"
      ) as HTMLDivElement,
      questionCard: document.querySelector(
        "#quiz-container > div:nth-child(2)"
      ) as HTMLDivElement,
      navigationDiv: document.querySelector(
        "#quiz-container > div:nth-child(3)"
      ) as HTMLDivElement,
      questionCounter: document.getElementById(
        "question-counter"
      ) as HTMLHeadingElement,
      categoryDisplay: document.getElementById(
        "category-display"
      ) as HTMLParagraphElement,
      scoreDisplay: document.getElementById(
        "score-display"
      ) as HTMLParagraphElement,
      progressBar: document.getElementById("progress-bar") as HTMLDivElement,
      difficultyBadge: document.getElementById(
        "difficulty-badge"
      ) as HTMLDivElement,
      questionText: document.getElementById(
        "question-text"
      ) as HTMLHeadingElement,
      answerOptions: document.getElementById(
        "answer-options"
      ) as HTMLDivElement,
      feedbackSection: document.getElementById(
        "feedback-section"
      ) as HTMLDivElement,
      feedbackIcon: document.getElementById("feedback-icon") as HTMLDivElement,
      feedbackTitle: document.getElementById(
        "feedback-title"
      ) as HTMLParagraphElement,
      feedbackMessage: document.getElementById(
        "feedback-message"
      ) as HTMLParagraphElement,
      prevButton: document.getElementById("prev-button") as HTMLButtonElement,
      nextButton: document.getElementById("next-button") as HTMLButtonElement,
      resultsModal: document.getElementById("results-modal") as HTMLDivElement,
      finalScore: document.getElementById(
        "final-score"
      ) as HTMLParagraphElement,
      percentageScore: document.getElementById(
        "percentage-score"
      ) as HTMLParagraphElement,
      reviewButton: document.getElementById(
        "review-button"
      ) as HTMLButtonElement,
      newQuizButton: document.getElementById(
        "new-quiz-button"
      ) as HTMLButtonElement,
      quizLoading: document.getElementById("quiz-loading") as HTMLDivElement,
      quizError: document.getElementById("quiz-error") as HTMLDivElement,
      reviewSection: document.getElementById(
        "review-section"
      ) as HTMLDivElement,
      reviewFinalScore: document.getElementById(
        "review-final-score"
      ) as HTMLParagraphElement,
      backToQuizButton: document.getElementById(
        "back-to-quiz-button"
      ) as HTMLButtonElement,
      reviewQuestions: document.getElementById(
        "review-questions"
      ) as HTMLDivElement,
      newQuizFromReviewButton: document.getElementById(
        "new-quiz-from-review-button"
      ) as HTMLButtonElement,
    };
  }

  const elements = getDOMElements();

  window.addEventListener("DOMContentLoaded", initializeQuiz);

  function initializeQuiz() {
    try {
      const questionsData = sessionStorage.getItem(
        STORAGE_KEYS.TRIVIA_QUESTIONS
      );

      if (!questionsData) {
        showError();
        return;
      }

      questions = JSON.parse(questionsData);

      if (questions.length === 0) {
        showError();
        return;
      }

      quizState = {
        questions,
        currentQuestionIndex: 0,
        score: 0,
        userAnswers: new Array(questions.length).fill(""),
        isComplete: false,
        showFeedback: false,
      };

      shuffledOptions = questions.map((question) => {
        if (question.type === "boolean") {
          return ["True", "False"];
        } else {
          return shuffleArray([
            question.correct_answer,
            ...question.incorrect_answers,
          ]);
        }
      });

      hideLoading();
      displayCurrentQuestion();
      setupEventListeners();
    } catch (error) {
      console.error("Error initializing quiz:", error);
      showError();
    }
  }

  function setupEventListeners() {
    elements.prevButton.addEventListener("click", goToPreviousQuestion);
    elements.nextButton.addEventListener("click", goToNextQuestion);
    elements.reviewButton.addEventListener("click", showReview);
    elements.newQuizButton.addEventListener(
      "click",
      () => (window.location.href = import.meta.env.BASE_URL)
    );
    elements.backToQuizButton.addEventListener("click", hideReview);
    elements.newQuizFromReviewButton.addEventListener(
      "click",
      () => (window.location.href = import.meta.env.BASE_URL)
    );
  }

  function displayCurrentQuestion() {
    const question = questions[quizState.currentQuestionIndex];
    const questionNumber = quizState.currentQuestionIndex + 1;
    const totalQuestions = questions.length;

    elements.questionCounter.textContent = formatQuestionNumber(
      quizState.currentQuestionIndex,
      totalQuestions
    );
    elements.categoryDisplay.textContent = question.category;
    elements.scoreDisplay.textContent = `${quizState.score}/${quizState.currentQuestionIndex}`;

    const progressPercentage = (questionNumber / totalQuestions) * 100;
    elements.progressBar.style.width = `${progressPercentage}%`;

    elements.difficultyBadge.textContent =
      question.difficulty.charAt(0).toUpperCase() +
      question.difficulty.slice(1);
    elements.difficultyBadge.className = `inline-block px-3 py-1 rounded-full text-sm font-medium mb-4 ${getDifficultyColor(question.difficulty)}`;

    elements.questionText.textContent = question.question;

    createAnswerOptions(question);

    elements.prevButton.disabled = quizState.currentQuestionIndex === 0;
    updateNextButton();

    if (quizState.userAnswers[quizState.currentQuestionIndex]) {
      showFeedback(
        question,
        quizState.userAnswers[quizState.currentQuestionIndex]
      );
    } else {
      hideFeedback();
    }
  }

  function getButtonStyle(
    option: string,
    question: TriviaQuestion,
    hasAnswered: boolean
  ): string {
    const userAnswer = quizState.userAnswers[quizState.currentQuestionIndex];

    if (userAnswer === option) {
      return option === question.correct_answer
        ? BUTTON_STYLES.CORRECT
        : BUTTON_STYLES.INCORRECT;
    }

    if (hasAnswered && option === question.correct_answer) {
      return BUTTON_STYLES.CORRECT;
    }

    if (hasAnswered) {
      return BUTTON_STYLES.DISABLED;
    }

    return BUTTON_STYLES.DEFAULT;
  }

  function createAnswerOptions(question: TriviaQuestion) {
    const options = shuffledOptions[quizState.currentQuestionIndex];

    elements.answerOptions.innerHTML = "";
    const hasAnswered =
      quizState.userAnswers[quizState.currentQuestionIndex] !== "";

    options.forEach((option, index) => {
      const button = document.createElement("button");
      button.className = getButtonStyle(option, question, hasAnswered);
      button.textContent = option;

      if (!hasAnswered) {
        button.addEventListener("click", () => selectAnswer(option));
      } else {
        button.disabled = true;
        button.style.cursor = "not-allowed";
      }

      elements.answerOptions.appendChild(button);
    });
  }

  function selectAnswer(selectedAnswer: string) {
    const question = questions[quizState.currentQuestionIndex];

    if (quizState.userAnswers[quizState.currentQuestionIndex] !== "") {
      return;
    }

    quizState.userAnswers[quizState.currentQuestionIndex] = selectedAnswer;

    if (selectedAnswer === question.correct_answer) {
      quizState.score++;
    }

    showFeedback(question, selectedAnswer);
    createAnswerOptions(question);
    updateNextButton();
    elements.scoreDisplay.textContent = `${quizState.score}/${quizState.currentQuestionIndex + 1}`;
  }

  function disableAnswerOptions() {
    const allButtons = elements.answerOptions.querySelectorAll("button");
    allButtons.forEach((button) => {
      button.disabled = true;
      button.style.cursor = "not-allowed";
    });
  }

  function showFeedback(question: TriviaQuestion, selectedAnswer: string) {
    const isCorrect = selectedAnswer === question.correct_answer;

    elements.feedbackSection.classList.remove("hidden");

    if (isCorrect) {
      elements.feedbackSection.className =
        "mt-6 p-4 rounded-lg bg-green-50 border border-green-200";
      elements.feedbackIcon.innerHTML =
        '<svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';
      elements.feedbackTitle.textContent = "Correct!";
      elements.feedbackTitle.className = "font-semibold text-green-800";
      elements.feedbackMessage.textContent = "Well done!";
      elements.feedbackMessage.className = "text-sm mt-1 text-green-700";
    } else {
      elements.feedbackSection.className =
        "mt-6 p-4 rounded-lg bg-red-50 border border-red-200";
      elements.feedbackIcon.innerHTML =
        '<svg class="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>';
      elements.feedbackTitle.textContent = "Incorrect";
      elements.feedbackTitle.className = "font-semibold text-red-800";
      elements.feedbackMessage.textContent = `The correct answer is: ${question.correct_answer}`;
      elements.feedbackMessage.className = "text-sm mt-1 text-red-700";
    }

    quizState.showFeedback = true;
  }

  function hideFeedback() {
    elements.feedbackSection.classList.add("hidden");
    quizState.showFeedback = false;
  }

  function updateNextButton() {
    const hasAnswered =
      quizState.userAnswers[quizState.currentQuestionIndex] !== "";
    const isLastQuestion =
      quizState.currentQuestionIndex === questions.length - 1;

    elements.nextButton.disabled = !hasAnswered;
    elements.nextButton.textContent = isLastQuestion
      ? "Finish Quiz"
      : "Next Question";
  }

  function goToPreviousQuestion() {
    if (quizState.currentQuestionIndex > 0) {
      quizState.currentQuestionIndex--;
      displayCurrentQuestion();
    }
  }

  function goToNextQuestion() {
    if (quizState.currentQuestionIndex < questions.length - 1) {
      quizState.currentQuestionIndex++;
      displayCurrentQuestion();
    } else {
      finishQuiz();
    }
  }

  function finishQuiz() {
    quizState.isComplete = true;

    const percentage = calculatePercentage(quizState.score, questions.length);

    elements.finalScore.textContent = `You scored ${quizState.score} out of ${questions.length}`;
    elements.percentageScore.textContent = `${percentage}%`;

    const resultsIcon = document.getElementById(
      "results-icon"
    ) as HTMLDivElement;
    if (percentage >= SCORE_THRESHOLDS.EXCELLENT) {
      resultsIcon.textContent = RESULT_ICONS.EXCELLENT;
    } else if (percentage >= SCORE_THRESHOLDS.GOOD) {
      resultsIcon.textContent = RESULT_ICONS.GOOD;
    } else {
      resultsIcon.textContent = RESULT_ICONS.NEEDS_IMPROVEMENT;
    }

    elements.resultsModal.style.display = "flex";
    elements.resultsModal.classList.remove("hidden");
  }

  function showReview() {
    elements.resultsModal.style.display = "none";
    elements.resultsModal.classList.add("hidden");

    elements.quizContainer.classList.add("hidden");
    elements.reviewSection.classList.remove("hidden");

    elements.reviewFinalScore.textContent = `${quizState.score}/${questions.length}`;

    displayAllQuestions();
  }

  function hideReview() {
    elements.reviewSection.classList.add("hidden");
    elements.quizContainer.classList.remove("hidden");

    elements.resultsModal.style.display = "flex";
    elements.resultsModal.classList.remove("hidden");
  }

  function displayAllQuestions() {
    elements.reviewQuestions.innerHTML = "";

    questions.forEach((question, index) => {
      const questionDiv = document.createElement("div");
      questionDiv.className = "bg-white rounded-lg shadow-lg p-6";

      const userAnswer = quizState.userAnswers[index];
      const isCorrect = userAnswer === question.correct_answer;
      const options = shuffledOptions[index];

      questionDiv.innerHTML = `
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-2">
              <span class="text-lg font-semibold text-gray-800">Question ${index + 1}</span>
              <span class="px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(question.difficulty)}">
                ${question.difficulty.charAt(0).toUpperCase() + question.difficulty.slice(1)}
              </span>
            </div>
            <p class="text-sm text-gray-600">${question.category}</p>
          </div>
          <div class="flex items-center">
            ${
              isCorrect
                ? '<svg class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>'
                : '<svg class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>'
            }
          </div>
        </div>
        
        <h3 class="text-lg font-semibold text-gray-800 mb-4 leading-relaxed">
          ${question.question}
        </h3>
        
        <div class="space-y-2">
          ${options
            .map((option) => {
              let optionClass = "p-3 border rounded-lg text-sm";
              let optionLabel = "";

              if (option === question.correct_answer) {
                optionClass += " border-green-500 bg-green-50 text-green-800";
                optionLabel = " ‚úì Correct Answer";
              } else if (option === userAnswer && !isCorrect) {
                optionClass += " border-red-500 bg-red-50 text-red-800";
                optionLabel = " ‚úó Your Answer";
              } else {
                optionClass += " border-gray-200 bg-gray-50 text-gray-600";
              }

              return `<div class="${optionClass}">
              <span>${option}</span>
              <span class="font-medium">${optionLabel}</span>
            </div>`;
            })
            .join("")}
        </div>
        
        ${
          !isCorrect && userAnswer
            ? `
          <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p class="text-sm text-blue-800">
              <span class="font-medium">Explanation:</span> The correct answer is "${question.correct_answer}".
            </p>
          </div>
        `
            : ""
        }
      `;

      elements.reviewQuestions.appendChild(questionDiv);
    });
  }

  function getDifficultyColor(difficulty: string): string {
    switch (difficulty) {
      case "easy":
        return "bg-green-100 text-green-800";
      case "medium":
        return "bg-yellow-100 text-yellow-800";
      case "hard":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  }

  function hideLoading() {
    elements.quizLoading.classList.add("hidden");
    elements.quizContainer.classList.remove("hidden");
    elements.questionCard.classList.remove("hidden");
    elements.navigationDiv.classList.remove("hidden");
  }

  function showError() {
    elements.quizLoading.classList.add("hidden");
    elements.quizError.classList.remove("hidden");
    elements.quizContainer.classList.add("hidden");
  }
</script>
